{"version":3,"file":"static/js/754.4ca45916.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileStatus.tsx","components/Profile/ProfileInfo/Contacts/Contacts.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPost.module.css?8a86","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm.tsx","components/Profile/MyPosts/MyPost.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"diskBlock\":\"ProfileInfo_diskBlock__Hi+ni\",\"ava\":\"ProfileInfo_ava__Bm-FQ\",\"profileInfo\":\"ProfileInfo_profileInfo__9af1X\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype Props = {\r\n    profileStatus: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus = ({updateStatus, profileStatus}: Props) => {\r\n\r\n    useEffect(() => {\r\n        setStatus(status)\r\n    }, [profileStatus])\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(profileStatus)\r\n\r\n    const activateMode = () => {\r\n        setEditMode(!editMode)\r\n    }\r\n\r\n    const deactivatedMode = () => {\r\n        setEditMode(!editMode)\r\n        updateStatus(status)\r\n    }\r\n\r\n    const changeStatus = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div style={{marginTop: '10px'}}>\r\n            {!editMode &&\r\n                <div><span\r\n                    onDoubleClick={activateMode}\r\n                ><b>Status: </b>{status || '...'}</span></div>\r\n            }\r\n            {editMode &&\r\n                <div><input\r\n                    autoFocus={true}\r\n                    onBlur={deactivatedMode}\r\n                    onChange={changeStatus}\r\n                    value={status}\r\n                /></div>}\r\n        </div>)\r\n}\r\n\r\nexport default ProfileStatus;","import React from \"react\";\r\n\r\ntype Props = {\r\n    title: string\r\n    value: string | null\r\n}\r\n\r\nexport const Contacts = ({title, value}: Props) => {\r\n    return <div>\r\n        <b>{title}:</b> {value}\r\n    </div>\r\n}","import {Contacts} from \"../Contacts/Contacts\";\r\nimport {ProfileContacts} from \"../../ProfileContainer\";\r\nimport React from \"react\";\r\nimport {UserProfile} from \"../../../../api/types/typesApi\";\r\n\r\ntype Props = {\r\n    profile: UserProfile\r\n    isOwner: boolean\r\n    setEditMode: (value: boolean) => void\r\n}\r\n\r\nexport const ProfileData = ({profile, isOwner, setEditMode}: Props) => {\r\n    return <>\r\n        <div style={{marginTop: '10px'}}>\r\n            <div><b>Full name</b>: {profile.fullName}</div>\r\n            <div><b>About me</b>: {profile.aboutMe}</div>\r\n            <div><b>Looking for a job</b>: {profile.lookingForAJob ? '!Yes' : 'No!'}</div>\r\n            <div><b>Looking for a job description</b>: {profile.lookingForAJobDescription}</div>\r\n        </div>\r\n\r\n        <div style={{marginTop: '10px'}}>\r\n            <h4>Contacts </h4>\r\n            <ul>\r\n                {Object.keys(profile.contacts).map((el) => {\r\n                    return <li style={{marginLeft: '20px'}}><Contacts title={el}\r\n                                                                      value={profile.contacts[el as keyof ProfileContacts]}\r\n                                                                      key={el}/></li>\r\n                })}\r\n            </ul>\r\n            <div>{isOwner && <button onClick={() => {\r\n                setEditMode(true)\r\n            }}>Редактировать</button>}</div>\r\n        </div>\r\n    </>\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Input, TextArea} from \"../../../../common/FormControls/FormControls\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {UserProfile} from \"../../../../api/types/typesApi\";\r\n\r\n\r\ntype Props = {\r\n    profile: UserProfile\r\n    setEditMode: (value: boolean) => void\r\n    isOwner: boolean\r\n}\r\n\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile}: Props & InjectedFormProps<UserProfile, Props>) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div style={{marginTop: '10px', display: 'flex', flexDirection: 'column', width: '450px'}}>\r\n            <div style={{display: 'flex', gap: '10px', justifyContent: 'space-between'}}><b>Full name</b> {<Field\r\n                placeholder={'Full name'}\r\n                component={Input}\r\n                name={'fullName'}\r\n                validate={[]}/>}</div>\r\n\r\n            <div style={{display: 'flex', gap: '10px', justifyContent: 'space-between'}}><b>About me</b> {<Field\r\n                placeholder={'About me'}\r\n                component={TextArea}\r\n                name={'aboutMe'}\r\n                validate={[]}/>}</div>\r\n\r\n            <div style={{display: 'flex', gap: '10px', justifyContent: 'space-between'}}><b>Looking for a job</b> {\r\n                <Field placeholder={''}\r\n                       component={Input}\r\n                       name={'lookingForAJob'}\r\n                       validate={[]}\r\n                       type={'checkbox'}/>}</div>\r\n            <div style={{display: 'flex', gap: '10px', justifyContent: 'space-between'}}><b>Looking for a job\r\n                Description</b> {<Field placeholder={'Looking For A Job Description'}\r\n                                        component={TextArea}\r\n                                        name={'lookingForAJobDescription'}\r\n                                        validate={[]}/>}</div>\r\n        </div>\r\n\r\n        <div style={{marginTop: '10px', width: '300px'}}>\r\n            <h4>Contacts </h4>\r\n            <ul>\r\n                {Object\r\n                    .keys(profile.contacts)\r\n                    .map((el) => {\r\n                    return <li style={{marginLeft: '20px'}}><b\r\n                        style={{display: 'flex', gap: '10px', justifyContent: 'space-between'}}>{el}: {<Field\r\n                        placeholder={el}\r\n                        name={`contacts.${el}`}\r\n                        validate={[]}\r\n                        component={Input}\r\n                        key={el}/>}</b>\r\n                    </li>\r\n                })}\r\n            </ul>\r\n            <div>{<button>Сохранить</button>}</div>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<UserProfile, Props>({form: 'Contacts'})(ProfileDataForm)","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../../common/Preloader/Preloader\";\r\nimport {ProfileDataForm} from \"../ProfileContainer\";\r\nimport photo from '../../../img/photo.png'\r\nimport ProfileStatus from \"../ProfileStatus\";\r\nimport {ProfileData} from \"./ProfileData/ProfileData\";\r\nimport {ProfileDataReduxForm} from './ProfileDataForm/ProfileDataForm';\r\nimport {Profile} from \"../../../redux/profile-reducer\";\r\n\r\ntype Props = {\r\n    profile: Profile\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileDataForm) => Promise<void>\r\n}\r\n\r\nconst ProfileInfo = ({saveProfile, profile, savePhoto, isOwner, status, updateStatus}: Props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const changeMainPhotoHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileDataForm) => {\r\n\r\n        saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false)\r\n            }).catch(e => {\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.diskBlock}>\r\n                <img src={profile.photos.large || photo} alt=\"\" className={s.ava}/>\r\n\r\n                <div>{isOwner &&\r\n                    <input type={'file'} onChange={changeMainPhotoHandler}/>}</div>\r\n\r\n                <ProfileStatus profileStatus={status} updateStatus={updateStatus}/>\r\n\r\n                {editMode\r\n                    ? <ProfileDataReduxForm profile={profile}\r\n                                            isOwner={isOwner}\r\n                                            setEditMode={setEditMode}\r\n                                            onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile}\r\n                                   isOwner={isOwner}\r\n                                   setEditMode={setEditMode}/>}\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MyPost_content__kM9HN\",\"item\":\"MyPost_item__ddCw3\",\"postBlock\":\"MyPost_postBlock__8viTO\",\"posts\":\"MyPost_posts__1aSdU\"};","import s from \"../MyPost.module.css\";\r\nimport profileAva from \"../../../../img/photo.png\";\r\nimport React from \"react\";\r\n\r\ntype Props = {\r\n    message: string,\r\n    likeCounts: string\r\n}\r\n\r\nconst Post = ({message, likeCounts}: Props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={profileAva} alt=\"\"/>\r\n            {message}\r\n            <div>\r\n                <span>Like </span>\r\n                {likeCounts}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../../../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validator\";\r\nimport React from \"react\";\r\nimport {MessageBody} from \"../../Dialogs/Dialogs\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const AddNewPostForm = (props: InjectedFormProps<MessageBody>) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name={'newMessageBody'}\r\n                    component={TextArea}\r\n                    validate={[required, maxLength10]}\r\n                    placeholder={'Post message'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddNewPostReduxForm = reduxForm<MessageBody>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n","import React from \"react\";\r\nimport s from './MyPost.module.css'\r\nimport Post from \"./Post/Post\"\r\nimport {Props} from \"./MyPostContainer\";\r\nimport {AddNewPostReduxForm} from \"./AddNewPostForm\";\r\nimport {MessageBody} from \"../../Dialogs/Dialogs\";\r\n\r\nconst MyPost = React.memo((props: Props) => {\r\n\r\n    const posts = props.posts.map((posts, index) => <Post key={index} message={posts.message}\r\n                                                          likeCounts={posts.likeCounts}/>)\r\n\r\n    let onAddPost = (values: MessageBody) => {\r\n        props.addPost(values.newMessageBody)\r\n    }\r\n\r\n    return (<div className={s.content}>\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>{posts}</div>\r\n        </div>\r\n    </div>)\r\n});\r\n\r\nexport default MyPost","import {Post} from \"../../../redux/profile-reducer\";\r\nimport MyPost from \"./MyPost\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppState} from \"../../../redux/store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostAC} from \"../../../redux/actions/actions\";\r\n\r\nconst mapStateToProps = (state: AppState): MapStateToProps => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        addPost: (newPostElement: string) => {\r\n            dispatch(addPostAC(newPostElement))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect<MapStateToProps, MapDispatchToProps, unknown, AppState>(mapStateToProps, mapDispatchToProps)(MyPost)\r\n\r\n\r\n//--------------------------------TYPES--------------------------------\r\ntype MapStateToProps = {\r\n    posts: Post[]\r\n}\r\ntype MapDispatchToProps = {\r\n    addPost: (newPostElement: string) => void\r\n}\r\nexport type Props = MapStateToProps & MapDispatchToProps\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostContainer} from \"./MyPosts/MyPostContainer\";\r\nimport {ProfileDataForm} from \"./ProfileContainer\";\r\nimport {UserProfile} from \"../../api/types/typesApi\";\r\n\r\ntype Props = {\r\n    profile: UserProfile | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileDataForm) => Promise<void>\r\n}\r\n\r\n\r\nconst Profile = ({profile, saveProfile, savePhoto, status, updateStatus, isOwner}: Props) => {\r\n\r\n    return (<div>\r\n        <ProfileInfo\r\n            profile={profile}\r\n            status={status}\r\n            updateStatus={updateStatus}\r\n            isOwner={isOwner}\r\n            savePhoto={savePhoto}\r\n            saveProfile={saveProfile}\r\n        />\r\n        <MyPostContainer/>\r\n    </div>)\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppState} from \"../../redux/store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {getProfileTC, getUserStatusTC, savePhotoTC, saveProfileTC, updateStatusTC} from \"../../redux/thunks/thunks\";\r\nimport {UserProfile} from \"../../api/types/typesApi\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<Props> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userID = this.props.match.params.userId\r\n\r\n        if (!userID) {\r\n            userID = !userID ? \"29875\" : String(this.props.loggedUser)\r\n            if (!userID) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getProfileTC(userID)\r\n        this.props.getUserStatusTC(userID)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Props, prevState: Props) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (<div>\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatusTC}\r\n                     savePhoto={this.props.savePhotoTC}\r\n                     saveProfile={(this.props.saveProfileTC)}\r\n            />\r\n        </div>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): MapStateToProps => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    loggedUser: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getProfileTC,\r\n        getUserStatusTC,\r\n        updateStatusTC,\r\n        savePhotoTC,\r\n        saveProfileTC\r\n    }),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n//--------------------------------TYPES--------------------------------\r\n\r\n\r\nexport type ProfileDataForm = Omit<UserProfile, 'userId' | 'photos'>\r\n\r\nexport type ProfilePhoto = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type ProfileContacts = {\r\n    github: string | null\r\n    vk: string | null\r\n    facebook: string | null\r\n    instagram: string | null\r\n    twitter: string | null\r\n    website: string | null\r\n    youtube: string | null\r\n    mainLink: string | null\r\n}\r\ntype PathParams = {\r\n    userId: string\r\n}\r\ntype MapStateToProps = {\r\n    profile: UserProfile | null\r\n    status: string\r\n    loggedUser: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToProps = {\r\n    getProfileTC: (userID: string | null) => void\r\n    getUserStatusTC: (status: string) => void\r\n    updateStatusTC: (status: string) => void\r\n    savePhotoTC: (file: File) => void\r\n    saveProfileTC: (profile: ProfileDataForm) => Promise<void>\r\n}\r\ntype ProfileClass = MapStateToProps & MapDispatchToProps\r\ntype Props = RouteComponentProps<PathParams> & ProfileClass"],"names":["_ref","updateStatus","profileStatus","useEffect","setStatus","status","editMode","setEditMode","useState","_jsxs","style","marginTop","children","_jsx","onDoubleClick","activateMode","autoFocus","onBlur","deactivatedMode","onChange","event","currentTarget","value","Contacts","title","ProfileData","profile","isOwner","_Fragment","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","map","el","marginLeft","onClick","ProfileDataReduxForm","reduxForm","form","handleSubmit","onSubmit","display","flexDirection","width","gap","justifyContent","Field","placeholder","component","Input","name","validate","TextArea","type","concat","saveProfile","savePhoto","Preloader","className","s","src","photos","large","photo","alt","e","target","files","ProfileStatus","formData","then","catch","message","likeCounts","profileAva","maxLength10","maxLengthCreator","AddNewPostReduxForm","props","required","React","posts","index","Post","values","addPost","newMessageBody","MyPostContainer","connect","state","profilePage","dispatch","newPostElement","addPostAC","MyPost","ProfileInfo","ProfileContainer","constructor","super","refreshProfile","userID","this","match","params","userId","String","loggedUser","history","push","getProfileTC","getUserStatusTC","componentDidMount","componentDidUpdate","prevProps","prevState","render","Profile","updateStatusTC","savePhotoTC","saveProfileTC","compose","auth","id","isAuth","withRouter"],"sourceRoot":""}