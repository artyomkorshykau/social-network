{"version":3,"file":"static/js/928.766b254f.chunk.js","mappings":"iJACA,QAAiC,yCAAjC,EAAqF,mC,2CCM9E,MAAMA,EAAiBA,KAE1B,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IACzCC,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,GAE3BC,GAAWC,EAAAA,EAAAA,MASjB,OAAOC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAiBC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAWC,UACvBC,EAAAA,EAAAA,KAAA,YAAUC,SAAWC,GAAUb,EAAea,EAAMC,cAAcC,OACxDA,MAAOhB,EACPiB,YAAa,oJAE3BL,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACC,KAAM,UAAWC,SAA2B,YAAjBjB,EAC3BkB,QAhBWC,KAClBtB,IAGLM,EAASiB,EAAO,OAAAC,YAAYxB,IAC5BC,EAAe,IAAG,EAWsBU,SAAC,+DAEvC,C,0FC9BV,QAA2B,2BCA3B,EAA0B,yBAA1B,EAAiE,6BAAjE,EAA6G,8B,aCMtG,MAAMc,EAAUC,EAAAA,MAAWC,IAAuB,IAAtB,QAACC,GAAeD,EAE/C,MAAME,EAAKD,EAAQE,OAEnB,OAAOtB,EAAAA,EAAAA,MAAA,OAAKC,UAAkB,QAAPoB,EAAenB,EAAgBA,EAAUC,SAAA,EAC5DC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,OAAKmB,IAAKH,EAAQI,MAAOC,IAAK,SAAUC,MAAO,YAEnD1B,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAeC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,QAAAD,SAAOiB,EAAQO,YACfvB,EAAAA,EAAAA,KAAA,KAAAD,SAAIiB,EAAQA,eAId,ICdGQ,EAAWA,KAEpB,MAAMC,GAAWjC,EAAAA,EAAAA,IAAYkC,EAAAA,GAEvBC,GAAmBC,EAAAA,EAAAA,QAAuB,OACzCC,EAAYC,IAAiBxC,EAAAA,EAAAA,WAAS,GAiB7C,OANAyC,EAAAA,EAAAA,YAAU,KACW,IAADC,EAAZH,IACwB,QAAxBG,EAAAL,EAAiBM,eAAO,IAAAD,GAAxBA,EAA0BE,eAAe,CAACC,SAAU,WACxD,GACD,CAACV,KAEG7B,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAYsC,SAfZlC,IACnB,IAAImC,EAAUnC,EAAMC,cACfmC,KAAKC,IAAIF,EAAQG,aAAeH,EAAQI,WAAaJ,EAAQK,aAAgB,KAC7Eb,GAAcC,GAAc,GAE7BD,GAAcC,GAAc,EAChC,EASuD/B,SAAA,CACtD0B,EAASkB,KAAKC,IAAmB5C,EAAAA,EAAAA,KAACa,EAAO,CAACG,QAAS4B,GAAQA,EAAE3B,OAC9DjB,EAAAA,EAAAA,KAAA,OAAK6C,IAAKlB,MACR,E,cChBV,MAoBA,EApBamB,KAET,MAAMpD,GAAWC,EAAAA,EAAAA,MACXoD,GAASvD,EAAAA,EAAAA,IAAYC,EAAAA,GAU3B,OARAsC,EAAAA,EAAAA,YAAU,KACNrC,EAASiB,EAAO,OAAAqC,qBACT,KACHtD,EAASiB,EAAO,OAAAsC,wBAAwB,IAE7C,KAGIrD,EAAAA,EAAAA,MAAA,OAAAG,SAAA,CACS,UAAXgD,IAAsB/C,EAAAA,EAAAA,KAAA,OAAAD,SAAK,8IAC5BC,EAAAA,EAAAA,KAACwB,EAAQ,KACTxB,EAAAA,EAAAA,KAACb,EAAAA,EAAc,MACb,C,0CC/BH,MAAMuC,EAAmBwB,GAAoBA,EAAMC,KAAK1B,SAClDhC,EAAmByD,GAAoBA,EAAMC,KAAKJ,M","sources":["webpack://samurai-way/./src/components/add-message-form/add-message-form.module.css?3001","components/add-message-form/add-message-form.tsx","webpack://samurai-way/./src/pages/chat/messages/messages.module.css?c64b","webpack://samurai-way/./src/components/message/message.module.css?a7de","components/message/message.tsx","pages/chat/messages/messages.tsx","pages/chat/chat.tsx","utils/selectors/chat-selectors/chat-selectors.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"AddMessageForm\":\"add-message-form_AddMessageForm__nVo4Y\",\"textarea\":\"add-message-form_textarea__o0Bsp\"};","import {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport s from './add-message-form.module.css'\r\nimport {Button} from \"antd\";\r\nimport {getSocketStatus} from \"../../utils/selectors/chat-selectors/chat-selectors\";\r\nimport {thunks} from \"../../redux/thunks/thunks\";\r\n\r\nexport const AddMessageForm = () => {\r\n\r\n    const [messageText, setMessageText] = useState('')\r\n    const socketStatus = useSelector(getSocketStatus)\r\n\r\n    const dispatch = useDispatch()\r\n    const sendMessageHandler = () => {\r\n        if (!messageText) {\r\n            return\r\n        }\r\n        dispatch(thunks.sendMessage(messageText))\r\n        setMessageText('')\r\n    }\r\n\r\n    return <div className={s.AddMessageForm}>\r\n        <div className={s.textarea}>\r\n            <textarea onChange={(event) => setMessageText(event.currentTarget.value)}\r\n                      value={messageText}\r\n                      placeholder={'Введите сообщение петухам'}/>\r\n        </div>\r\n        <div>\r\n            <Button type={'primary'} disabled={socketStatus === 'pending'}\r\n                    onClick={sendMessageHandler}>Отправить</Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"messages_messages__NrDVm\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"message_message__WFB7i\",\"userMessage\":\"message_userMessage__ZJLNx\",\"messageBlock\":\"message_messageBlock__58HMd\"};","import React from \"react\";\r\nimport s from './message.module.css'\r\nimport {ChatMessage} from \"../../pages/chat/chat\";\r\n\r\ntype Props = {\r\n    message: ChatMessage\r\n}\r\nexport const Message = React.memo(({message}: Props) => {\r\n\r\n    const id = message.userId\r\n\r\n    return <div className={id === 29875 ? s.userMessage : s.message}>\r\n        <div>\r\n            <img src={message.photo} alt={'avatar'} width={'40px'}/>\r\n        </div>\r\n        <div className={s.messageBlock}>\r\n            <span>{message.userName}</span>\r\n            <p>{message.message}</p>\r\n        </div>\r\n\r\n\r\n    </div>\r\n})","import s from './messages.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {getChatMessages} from \"../../../utils/selectors/chat-selectors/chat-selectors\";\r\nimport {Message} from \"../../../components/message/message\";\r\nimport { ChatMessage } from '../chat';\r\n\r\nexport const Messages = () => {\r\n\r\n    const messages = useSelector(getChatMessages)\r\n\r\n    const messageAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [autoScroll, setAutoScroll] = useState(false)\r\n\r\n    const scrollHandler = (event: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = event.currentTarget\r\n        if ((Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !autoScroll && setAutoScroll(true)\r\n        } else {\r\n            autoScroll && setAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (autoScroll) {\r\n            messageAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages]);\r\n\r\n    return <div className={s.messages} onScroll={scrollHandler}>\r\n        {messages.map((m: ChatMessage) => <Message message={m} key={m.id}/>)}\r\n        <div ref={messageAnchorRef}></div>\r\n    </div>\r\n}","import {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {thunks} from \"../../redux/thunks/thunks\";\r\nimport {getSocketStatus} from \"../../utils/selectors/chat-selectors/chat-selectors\";\r\nimport {Messages} from \"./messages/messages\";\r\nimport {AddMessageForm} from \"../../components/add-message-form/add-message-form\";\r\n\r\nexport type ChatMessageApi = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nexport type ChatMessage = ChatMessageApi & { id: string }\r\n\r\nconst Chat = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector(getSocketStatus)\r\n\r\n    useEffect(() => {\r\n        dispatch(thunks.messagesListening())\r\n        return () => {\r\n            dispatch(thunks.stopMessagesListening())\r\n        }\r\n    }, []);\r\n\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Ошибка! Обновите страницу.</div>}\r\n        <Messages/>\r\n        <AddMessageForm/>\r\n    </div>\r\n}\r\n\r\nexport default Chat","import {AppState} from \"../../../redux/store/store\";\r\n\r\nexport const getChatMessages = (state: AppState) => state.chat.messages\r\nexport const getSocketStatus = (state: AppState) => state.chat.status\r\n\r\n\r\n\r\n"],"names":["AddMessageForm","messageText","setMessageText","useState","socketStatus","useSelector","getSocketStatus","dispatch","useDispatch","_jsxs","className","s","children","_jsx","onChange","event","currentTarget","value","placeholder","Button","type","disabled","onClick","sendMessageHandler","thunks","sendMessage","Message","React","_ref","message","id","userId","src","photo","alt","width","userName","Messages","messages","getChatMessages","messageAnchorRef","useRef","autoScroll","setAutoScroll","useEffect","_messageAnchorRef$cur","current","scrollIntoView","behavior","onScroll","element","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","ref","Chat","status","messagesListening","stopMessagesListening","state","chat"],"sourceRoot":""}