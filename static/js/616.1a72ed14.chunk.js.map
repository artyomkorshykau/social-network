{"version":3,"file":"static/js/616.1a72ed14.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPost.module.css?8a86","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPost.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"diskBlock\":\"ProfileInfo_diskBlock__Aupm-\",\"ava\":\"ProfileInfo_ava__7Eanh\",\"profileInfo\":\"ProfileInfo_profileInfo__FWUoZ\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    const activateMode = () => {\r\n        setEditMode(!editMode)\r\n    }\r\n\r\n    const deactivatedMode = () => {\r\n        setEditMode(!editMode)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const changeStatus = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n                <div><span\r\n                    onDoubleClick={activateMode}\r\n                > - {props.status || '...'}</span></div>\r\n            }\r\n            {editMode &&\r\n                <div><input\r\n                    autoFocus={true}\r\n                    onBlur={deactivatedMode}\r\n                    onChange={changeStatus}\r\n                    value={status}\r\n                /></div>}\r\n        </>)\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\nimport s from './ProfileInfo.module.css'\nimport {Preloader} from \"../../../common/Preloader/Preloader\";\nimport {ProfileUserType} from \"../ProfileContainer\";\nimport ava from '../../../img/ava.jpg'\nimport ProfileStatus from \"../ProfileStatus\";\n\n\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\n\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div className={s.diskBlock}>\n                <img src={props.profile.photos.small || ava} alt=\"\" className={s.ava}/>\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n                <div>- {props.profile.aboutMe}</div>\n                <div>- {props.profile.lookingForAJob}</div>\n                <div>- {props.profile.fullName}</div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProfileInfo;\n\n//--------------------------------TYPES--------------------------------\ntype ProfileInfoPropsType = {\n    profile: ProfileUserType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MyPost_content__vESW5\",\"item\":\"MyPost_item__OmEV-\",\"postBlock\":\"MyPost_postBlock__7PWqt\",\"posts\":\"MyPost_posts__YCMOS\"};","import s from \"../MyPost.module.css\";\nimport profileAva from \"../../../../img/ava.jpg\";\nimport React from \"react\";\n\nconst Post: React.FC<PostPropsType> = (props) => {\n    return (\n        <div className={s.item}>\n            <img src={profileAva} alt=\"\"/>\n            {props.message}\n            <div>\n                <span>Like </span>\n                {props.likeCounts}\n            </div>\n        </div>\n    )\n}\n\nexport default Post\n\n//--------------------------------TYPES--------------------------------\n\ntype PostPropsType = {\n    message: string,\n    likeCounts: string\n}\n","import React from \"react\";\nimport s from './MyPost.module.css'\nimport Post from \"./Post/Post\"\nimport {MyPostsPropsType} from \"./MyPostContainer\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validator\";\nimport {TextArea} from \"../../../common/FormControls/FormControls\";\n\nconst MyPost = React.memo((props: MyPostsPropsType) => {\n    console.log('render')\n\n    const posts = props.posts.map((posts, index) => <Post key={index} message={posts.message}\n                                                          likeCounts={posts.likeCounts}/>)\n\n    let onAddPost = (values: any) => {\n        props.addPost(values.newPostElement)\n    }\n\n    return (<div className={s.content}>\n        <div className={s.postBlock}>\n            <h3>My posts</h3>\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\n            <div className={s.posts}>{posts}</div>\n        </div>\n    </div>)\n});\n\nconst maxLength10 = maxLengthCreator(10)\n\nlet AddNewPostForm = (props: any) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    name={'newPostElement'}\n                    component={TextArea}\n                    validate={[required, maxLength10]}\n                    placeholder={'Post message'}\n                />\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostReduxForm = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\n\nexport default MyPost","import React from \"react\";\nimport {PostsType} from \"../../../redux/profile-reducer\";\nimport MyPost from \"./MyPost\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/store\";\nimport {Dispatch} from \"redux\";\nimport {addPostAC} from \"../../../redux/actions/actions\";\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addPost: (newPostElement: string) => {\n            dispatch(addPostAC(newPostElement))\n        }\n    }\n}\n\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)\n\n\n//--------------------------------TYPES--------------------------------\ntype MapStateToPropsType = {\n    posts: PostsType[]\n}\ntype MapDispatchToPropsType = {\n    addPost: (newPostElement: string) => void\n}\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\n","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostContainer} from \"./MyPosts/MyPostContainer\";\nimport {ProfileUserType} from \"./ProfileContainer\";\n\n\nconst Profile = (props: ProfilePropsType) => {\n\n    return (<div>\n        <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n        <MyPostContainer/>\n    </div>)\n}\n\nexport default Profile\n\n\n//--------------------------------TYPES--------------------------------\ntype ProfilePropsType = {\n    profile: ProfileUserType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/store\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {getProfileTC, getUserStatusTC, updateStatusTC} from \"../../redux/thunks/thunks\";\n\n\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\n\n    componentDidMount() {\n        let userID = this.props.match.params.userId\n\n        if (!userID) {\n            userID = !userID ? \"29875\" : String(this.props.loggedUser)\n            if (!userID) {\n                this.props.history.push('/login')\n            }\n        }\n\n        this.props.getProfileTC(userID)\n        this.props.getUserStatusTC(userID)\n    }\n\n    render() {\n\n        return (<div>\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatusTC}/>\n        </div>)\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToProps => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    loggedUser: state.auth.id,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getProfileTC, getUserStatusTC, updateStatusTC}),\n    withRouter,\n    // withAuthRedirect\n)(ProfileContainer)\n\n\n//--------------------------------TYPES--------------------------------\nexport type ProfileUserType = {\n    aboutMe: string\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    contacts: ProfileContactsType\n    photos: {\n        small: string\n        large: string\n    }\n}\nexport type ProfileContactsType = {\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\ntype PathParamsType = {\n    userId: string\n}\ntype MapStateToProps = {\n    profile: ProfileUserType | null\n    status: string\n    loggedUser: string | null\n    isAuth: boolean | null\n}\ntype MapDispatchToProps = {\n    getProfileTC: (userID: string) => void\n    getUserStatusTC: (status: string) => void\n    updateStatusTC: (status: string) => void\n}\ntype ProfileClassType = MapStateToProps & MapDispatchToProps\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & ProfileClassType","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["props","useEffect","setStatus","status","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","_jsxs","_Fragment","children","_jsx","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","event","currentTarget","value","profile","className","s","src","photos","small","ava","alt","ProfileStatus","aboutMe","lookingForAJob","fullName","Preloader","profileAva","message","likeCounts","MyPost","React","console","log","posts","map","index","Post","AddNewPostReduxForm","onSubmit","values","addPost","newPostElement","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","TextArea","validate","required","placeholder","MyPostContainer","connect","state","profilePage","dispatch","addPostAC","ProfileInfo","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","userID","this","match","params","userId","String","loggedUser","history","push","getProfileTC","getUserStatusTC","Profile","_objectSpread","updateStatusTC","compose","auth","id","isAuth","withRouter","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","call","next","Object","done","length","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}