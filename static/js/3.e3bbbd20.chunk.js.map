{"version":3,"file":"static/js/3.e3bbbd20.chunk.js","mappings":"wNAMMA,EAA6B,SAACC,GAAmB,MAAsC,CACzFC,OAAQD,EAAME,KAAKD,OAEtB,EAEM,SAASE,EAAoBC,GAShC,OAAOC,EAAAA,EAAAA,IAAQN,EAARM,EARP,SAA2BC,GAEvB,IAAKL,EAAwBK,EAAxBL,OAAWM,GAASC,EAAAA,EAAAA,GAAIF,EAAKG,GAClC,OAAKR,GAEES,EAAAA,EAAAA,KAACN,GAASO,EAAAA,EAAAA,GAAA,GAAKJ,KAFFG,EAAAA,EAAAA,KAACE,EAAAA,GAAQ,CAACC,GAAI,UAGtC,GAGJ,C,4FCpBA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mBCGnKC,EAA4C,SAACR,GACtD,IAAIS,EAAO,YAAcT,EAAMU,GAE/B,OAAQN,EAAAA,EAAAA,KAAA,OAAKO,UAAWC,EAAEC,OAAS,IAAMD,EAAEE,OAAOC,UAC9CX,EAAAA,EAAAA,KAACY,EAAAA,GAAO,CAACT,GAAIE,EAAKM,SAAEf,EAAMiB,QAElC,ECPaC,EAAsC,SAAClB,GAChD,OAAQI,EAAAA,EAAAA,KAAA,OAAKO,UAAWC,EAAEC,OAAOE,SAAEf,EAAMmB,SAC7C,E,gDCoCMC,GAAYC,EAAAA,EAAAA,GAAiB,KAmB7BC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,yBAAjBD,EAjBL,SAACvB,GACpB,OACIyB,EAAAA,EAAAA,MAAA,QAAMC,SAAU1B,EAAM2B,aAAaZ,SAAA,EAC/BX,EAAAA,EAAAA,KAAA,OAAAW,UACIX,EAAAA,EAAAA,KAACwB,EAAAA,EAAK,CAACC,UAAWC,EAAAA,EACXb,KAAM,iBACNc,YAAa,qBACbC,SAAU,CAACC,EAAAA,EAAUb,QAGhChB,EAAAA,EAAAA,KAAA,OAAAW,UACIX,EAAAA,EAAAA,KAAA,UAAAW,SAAQ,aAIxB,IAIA,EAlD4C,SAACf,GAEzC,IAAIkC,EAAcC,EAAAA,EAAMC,WAAWF,YAE/BG,EAAcH,EAAYI,QACzBC,KAAI,SAACD,EAAsBE,GAAK,OAAKpC,EAAAA,EAAAA,KAACI,EAAU,CACCS,KAAMqB,EAAQrB,KACdP,GAAI4B,EAAQ5B,IAFP8B,EAEY,IACnEC,EAAcP,EAAYQ,SACzBH,KAAI,SAACpB,EAAsBqB,GAAK,OAAKpC,EAAAA,EAAAA,KAACc,EAAO,CACCC,QAASA,EAAQwB,OADZH,EACoB,IAM5E,OACIf,EAAAA,EAAAA,MAAA,OAAKd,UAAWC,EAAE0B,QAAQvB,SAAA,EACtBX,EAAAA,EAAAA,KAAA,OAAKO,UAAWC,EAAEgC,aAAa7B,SAC1BsB,KAELjC,EAAAA,EAAAA,KAAA,OAAKO,UAAWC,EAAE8B,SAAS3B,UACvBX,EAAAA,EAAAA,KAAA,OAAAW,SAAM0B,OAEVrC,EAAAA,EAAAA,KAACkB,EAAmB,CAACI,SAZP,SAACmB,GACnB7C,EAAM8C,YAAYD,EAAOE,eAC7B,MAaJ,E,mBCfA,GAAeC,EAAAA,EAAAA,KACXjD,EAAAA,EAAAA,KAfoB,SAACL,GACrB,MAAO,CACHwC,YAAaxC,EAAMwC,YAE3B,IAE2B,SAACe,GACxB,MAAO,CACHH,YAAa,SAACC,GACVE,GAASC,EAAAA,EAAAA,IAAcH,GAC3B,EAER,IAIIlD,EAAAA,EAFJ,CAGEsD,E","sources":["HOC/withAuthRedirect.tsx","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToPropsForRedirectType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n//--------------------------------TYPES--------------------------------\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean | null\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__B1qus\",\"dialogsItems\":\"Dialogs_dialogsItems__xWjXx\",\"active\":\"Dialogs_active__VSaZz\",\"messages\":\"Dialogs_messages__ZsPRc\",\"message\":\"Dialogs_message__3458d\"};","import s from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport React from \"react\";\n\nexport const DialogItem: React.FC<DialogItemPropsType> = (props) => {\n    let path = '/dialogs/' + props.id\n\n    return (<div className={s.dialog + ' ' + s.active}>\n        <NavLink to={path}>{props.name}</NavLink>\n    </div>)\n}\n\n//--------------------------------TYPES--------------------------------\ntype DialogItemPropsType = {\n    name: string\n    id: string\n}","import s from \"../Dialogs.module.css\";\nimport React from \"react\";\n\nexport const Message: React.FC<MessagePropsType> = (props) => {\n    return (<div className={s.dialog}>{props.message}</div>)\n}\n\n//--------------------------------TYPES--------------------------------\ntype MessagePropsType = {\n    message: string\n}\n","import React from \"react\";\nimport s from './Dialogs.module.css'\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport {DialogsType, MessageType} from \"../../redux/dialogs-reducer\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {TextArea} from \"../../common/FormControls/FormControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validator\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {store} from \"../../redux/store\";\n\n\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\n\n    let dialogsPage = store.getState().dialogsPage\n\n    let dialogsItem = dialogsPage.dialogs\n        .map((dialogs: DialogsType, index) => <DialogItem key={index}\n                                                          name={dialogs.name}\n                                                          id={dialogs.id}/>)\n    let messageItem = dialogsPage.messages\n        .map((message: MessageType, index) => <Message key={index}\n                                                       message={message.title}/>)\n\n    const addNewMessage = (values: any) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsItem}\n            </div>\n            <div className={s.messages}>\n                <div>{messageItem}</div>\n            </div>\n            <AddMessageReduxForm onSubmit={addNewMessage}/>\n        </div>\n    )\n}\n\nconst maxLength = maxLengthCreator(100)\n\nconst AddMessageForm = (props: any) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={TextArea}\n                       name={'newMessageBody'}\n                       placeholder={'Enter your message'}\n                       validate={[required, maxLength]}\n                />\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm({form: 'dialogsAddMessageForm'})(AddMessageForm)\n\nexport default Dialogs","import React from \"react\"\nimport {AppStateType} from \"../../redux/store\";\nimport {sendMessageAC} from \"../../redux/actions/actions\";\nimport {compose, Dispatch} from \"redux\";\nimport Dialogs from \"./Dialogs\";\nimport {ProfilePageType} from \"../../redux/dialogs-reducer\";\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\nimport {connect} from \"react-redux\";\n\n\nconst mapStateToProps = (state: AppStateType): MapStateDialogsToProps => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchDialogsToProps => {\n    return {\n        sendMessage: (newMessageBody: string) => {\n            dispatch(sendMessageAC(newMessageBody))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\n\n\n//--------------------------------TYPES--------------------------------\ntype MapStateDialogsToProps = {\n    dialogsPage: ProfilePageType\n}\n\ntype MapDispatchDialogsToProps = {\n    sendMessage: (newMessageBody: string) => void\n}\n\nexport type DialogsPropsType = MapDispatchDialogsToProps & MapStateDialogsToProps"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","_objectWithoutProperties","_excluded","_jsx","_objectSpread","Redirect","to","DialogItem","path","id","className","s","dialog","active","children","NavLink","name","Message","message","maxLength","maxLengthCreator","AddMessageReduxForm","reduxForm","form","_jsxs","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","dialogsPage","store","getState","dialogsItem","dialogs","map","index","messageItem","messages","title","dialogsItems","values","sendMessage","newMessageBody","compose","dispatch","sendMessageAC","Dialogs"],"sourceRoot":""}