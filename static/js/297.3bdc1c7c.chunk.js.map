{"version":3,"file":"static/js/297.3bdc1c7c.chunk.js","mappings":"qKACA,SAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,uBCQzK,MAAMA,EAAaC,IAAwB,IAAvB,KAACC,EAAI,GAAEC,GAAUF,EACpCG,EAAO,YAAcD,EAEzB,OAAQE,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEC,OAAS,IAAMD,EAAEE,OAAOC,UAC9CL,EAAAA,EAAAA,KAACM,EAAAA,GAAO,CAACC,GAAIR,EAAKM,SAAER,KAClB,ECPGW,EAAUZ,IAAuB,IAAtB,QAACa,GAAeb,EACpC,OAAQI,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEC,OAAOE,SAAEI,GAAc,E,qDCFrD,MAAMC,GAAYC,EAAAA,EAAAA,GAAiB,KAmBtBC,GAAsBC,EAAAA,EAAAA,GAAuB,CAACC,KAAM,yBAA9BD,EAjBXE,IAEhBC,EAAAA,EAAAA,MAAA,QAAMC,SAAUF,EAAMG,aAAab,SAAA,EAC/BL,EAAAA,EAAAA,KAAA,OAAAK,UACIL,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACC,UAAWC,EAAAA,EACXxB,KAAM,iBACNyB,YAAa,qBACbC,SAAU,CAACC,EAAAA,EAAUd,QAGhCV,EAAAA,EAAAA,KAAA,OAAAK,UACIL,EAAAA,EAAAA,KAAA,UAAAK,SAAQ,gBCwBxB,EAjCiBU,IAEb,IAAIU,EAAcC,EAAAA,EAAMC,WAAWF,YAE/BG,EAAcH,EAAYI,QACzBC,KAAI,CAACD,EAAiBE,KAAU/B,EAAAA,EAAAA,KAACL,EAAU,CACCE,KAAMgC,EAAQhC,KACdC,GAAI+B,EAAQ/B,IAFPiC,KAGlDC,EAAcP,EAAYQ,SACzBH,KAAI,CAACrB,EAAmBsB,KAAU/B,EAAAA,EAAAA,KAACQ,EAAO,CACCC,QAASA,EAAQyB,OADZH,KAOrD,OACIf,EAAAA,EAAAA,MAAA,OAAKf,UAAWC,EAAE2B,QAAQxB,SAAA,EACtBL,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEiC,aAAa9B,SAC1BuB,KAEL5B,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAE+B,SAAS5B,UACvBL,EAAAA,EAAAA,KAAA,OAAAK,SAAM2B,OAEVhC,EAAAA,EAAAA,KAACY,EAAmB,CAACK,SAZNmB,IACnBrB,EAAMsB,YAAYD,EAAOE,eAAe,MAYlC,E,uBC7Bd,MAAMC,EAAmBC,IAAe,CACpCC,OAAQD,EAAME,KAAKD,SCGvB,MAcA,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfqBJ,IACd,CACHf,YAAae,EAAMf,gBAICoB,IACjB,CACHR,YAAcC,IACVO,GAASC,EAAAA,EAAAA,IAAcR,GAAgB,ODR5C,SAA6BS,GAShC,OAAOH,EAAAA,EAAAA,IAA0CL,EAA1CK,EARP,SAA2B7B,GAEvB,IAAI,OAAC0B,KAAWO,GAAajC,EAC7B,OAAK0B,GAEEzC,EAAAA,EAAAA,KAAC+C,EAAS,IAAKC,KAFFhD,EAAAA,EAAAA,KAACiD,EAAAA,GAAQ,CAAC1C,GAAI,UAGtC,GAGJ,GCGA,CAGE2C,E","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__DWnTV\",\"dialogsItems\":\"Dialogs_dialogsItems__2aj4l\",\"active\":\"Dialogs_active__Ifobq\",\"messages\":\"Dialogs_messages__YJu8W\",\"message\":\"Dialogs_message__S0Ae0\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype Props = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem = ({name, id}: Props) => {\r\n    let path = '/dialogs/' + id\r\n\r\n    return (<div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{name}</NavLink>\r\n    </div>)\r\n}\r\n\r\n","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype Props = {\r\n    message: string\r\n}\r\n\r\nexport const Message = ({message}: Props) => {\r\n    return (<div className={s.dialog}>{message}</div>)\r\n}\r\n","import {maxLengthCreator, required} from \"../../../utils/validators/validator\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../../../common/FormControls/FormControls\";\r\nimport React from \"react\";\r\nimport {MessageBody} from \"../Dialogs\";\r\n\r\nconst maxLength = maxLengthCreator(100)\r\n\r\nconst AddMessageForm = (props: InjectedFormProps<MessageBody>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<MessageBody>({form: 'dialogsAddMessageForm'})(AddMessageForm)","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {Dialog, Messages} from \"../../redux/dialogs-reducer\";\r\nimport {store} from \"../../redux/store\";\r\nimport {AddMessageReduxForm} from \"./AddMessageForm/AddMessageForm\";\r\nimport {Props} from \"./DialogsContainer\";\r\n\r\n\r\nconst Dialogs = (props: Props) => {\r\n\r\n    let dialogsPage = store.getState().dialogsPage\r\n\r\n    let dialogsItem = dialogsPage.dialogs\r\n        .map((dialogs: Dialog, index) => <DialogItem key={index}\r\n                                                     name={dialogs.name}\r\n                                                     id={dialogs.id}/>)\r\n    let messageItem = dialogsPage.messages\r\n        .map((message: Messages, index) => <Message key={index}\r\n                                                    message={message.title}/>)\r\n\r\n    const addNewMessage = (values: MessageBody) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsItem}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageItem}</div>\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type MessageBody = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport default Dialogs","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppState} from \"../redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state: AppState): MapStateToProps => ({\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToProps) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as unknown as T}/>\r\n    }\r\n\r\n    return connect<MapStateToProps, {}, T, AppState>(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n//--------------------------------TYPES--------------------------------\r\ntype MapStateToProps = {\r\n    isAuth: boolean | null\r\n}\r\n","import React from \"react\"\r\nimport {AppState} from \"../../redux/store\";\r\nimport {sendMessageAC} from \"../../redux/actions/actions\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {ProfilePage} from \"../../redux/dialogs-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state: AppState): MapStateToProps => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToProps, MapDispatchToProps, unknown, AppState>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n//--------------------------------TYPES--------------------------------\r\ntype MapStateToProps = {\r\n    dialogsPage: ProfilePage\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type Props = MapDispatchToProps & MapStateToProps"],"names":["DialogItem","_ref","name","id","path","_jsx","className","s","dialog","active","children","NavLink","to","Message","message","maxLength","maxLengthCreator","AddMessageReduxForm","reduxForm","form","props","_jsxs","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","dialogsPage","store","getState","dialogsItem","dialogs","map","index","messageItem","messages","title","dialogsItems","values","sendMessage","newMessageBody","mapStateToProps","state","isAuth","auth","compose","connect","dispatch","sendMessageAC","Component","restProps","Redirect","Dialogs"],"sourceRoot":""}