{"version":3,"file":"static/js/900.79c6430a.chunk.js","mappings":"2LAKO,MAAMA,EAAiBA,KAE1B,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IACzCC,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IAE3BC,GAAWC,EAAAA,EAAAA,MASjB,OAAOC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACHC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,YAAUC,SAAWC,GAAUX,EAAeW,EAAMC,cAAcC,OAAQA,MAAOd,OAErFU,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,UAAQK,SAA2B,YAAjBZ,EAA4Ba,QAb3BC,KAClBjB,IAGLM,EAASY,EAAO,OAAAC,YAAYnB,IAC5BC,EAAe,IAAG,EAQ4DQ,SAAC,+DAE7E,ECrBGW,EAAUC,IAAuB,IAAtB,QAACC,GAAeD,EAEpC,OAAOb,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACHC,EAAAA,EAAAA,KAAA,OAAKa,IAAKD,EAAQE,MAAOC,IAAK,SAAUC,MAAO,UAAShB,EAAAA,EAAAA,KAAA,KAAAD,SAAIa,EAAQK,YACpEjB,EAAAA,EAAAA,KAAA,SACCY,EAAQA,SACTZ,EAAAA,EAAAA,KAAA,WACE,ECXV,EAA2B,2BCKdkB,EAAWA,KAEpB,MAAMC,GAAWzB,EAAAA,EAAAA,IAAY0B,EAAAA,IAEvBC,GAAmBC,EAAAA,EAAAA,QAAuB,OACzCC,EAAYC,IAAiBhC,EAAAA,EAAAA,WAAS,GAiB7C,OANAiC,EAAAA,EAAAA,YAAU,KACW,IAADC,EAAZH,IACwB,QAAxBG,EAAAL,EAAiBM,eAAO,IAAAD,GAAxBA,EAA0BE,eAAe,CAACC,SAAU,WACxD,GACD,CAACV,KAEGrB,EAAAA,EAAAA,MAAA,OAAKgC,UAAWC,EAAYC,SAfZ9B,IACnB,IAAI+B,EAAU/B,EAAMC,cACf+B,KAAKC,IAAIF,EAAQG,aAAeH,EAAQI,WAAaJ,EAAQK,aAAgB,KAC7Ef,GAAcC,GAAc,GAE7BD,GAAcC,GAAc,EAChC,EASuDzB,SAAA,CACtDoB,EAASoB,KAAI,CAACC,EAAGC,KAAUzC,EAAAA,EAAAA,KAACU,EAAO,CAACE,QAAS4B,GAAQC,MACtDzC,EAAAA,EAAAA,KAAA,OAAK0C,IAAKrB,MACR,ECxBGsB,EAAOA,KAEhB,MAAM/C,GAAWC,EAAAA,EAAAA,MACX+C,GAASlD,EAAAA,EAAAA,IAAYC,EAAAA,IAU3B,OARA8B,EAAAA,EAAAA,YAAU,KACN7B,EAASY,EAAO,OAAAqC,qBACT,KACHjD,EAASY,EAAO,OAAAsC,wBAAwB,IAE7C,KAGIhD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACS,UAAX6C,IAAsB5C,EAAAA,EAAAA,KAAA,OAAAD,SAAK,qCAC5BC,EAAAA,EAAAA,KAACkB,EAAQ,KACTlB,EAAAA,EAAAA,KAACX,EAAc,MACb,ECPV,EAPiB0D,KAEN/C,EAAAA,EAAAA,KAAA,OAAAD,UACHC,EAAAA,EAAAA,KAAC2C,EAAI,K","sources":["pages/ChatPage/AddMessageForm/AddMessageForm.tsx","pages/ChatPage/Messages/Message/Message.tsx","webpack://samurai-way/./src/pages/ChatPage/Messages/Messages.module.css?8abf","pages/ChatPage/Messages/Messages.tsx","pages/ChatPage/Chat/Chat.tsx","pages/ChatPage/ChatPage.tsx"],"sourcesContent":["import {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {thunks} from \"../../../redux/thunks/thunks\";\r\nimport {getSocketStatus} from \"../../../utils/selectors/userSelectors\";\r\n\r\nexport const AddMessageForm = () => {\r\n\r\n    const [messageText, setMessageText] = useState('')\r\n    const socketStatus = useSelector(getSocketStatus)\r\n\r\n    const dispatch = useDispatch()\r\n    const sendMessageHandler = () => {\r\n        if (!messageText) {\r\n            return\r\n        }\r\n        dispatch(thunks.sendMessage(messageText))\r\n        setMessageText('')\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(event) => setMessageText(event.currentTarget.value)} value={messageText}></textarea>\r\n        </div>\r\n        <div>\r\n            <button disabled={socketStatus === 'pending'} onClick={sendMessageHandler}>Отправить</button>\r\n        </div>\r\n    </div>\r\n}","import {ChatMessage} from \"../../ChatPage\";\r\n\r\ntype Props = {\r\n    message: ChatMessage\r\n}\r\nexport const Message = ({message}: Props) => {\r\n\r\n    return <div>\r\n        <img src={message.photo} alt={'avatar'} width={'40px'}/><b>{message.userName}</b>\r\n        <br/>\r\n        {message.message}\r\n        <hr/>\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Messages_messages__gee4N\"};","import {Message} from \"./Message/Message\";\r\nimport s from './Messages.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {getChatMessages} from \"../../../utils/selectors/userSelectors\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\n\r\nexport const Messages = () => {\r\n\r\n    const messages = useSelector(getChatMessages)\r\n\r\n    const messageAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [autoScroll, setAutoScroll] = useState(false)\r\n\r\n    const scrollHandler = (event: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = event.currentTarget\r\n        if ((Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !autoScroll && setAutoScroll(true)\r\n        } else {\r\n            autoScroll && setAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (autoScroll) {\r\n            messageAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages]);\r\n\r\n    return <div className={s.messages} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message message={m} key={index}/>)}\r\n        <div ref={messageAnchorRef}></div>\r\n    </div>\r\n}","import {AddMessageForm} from \"../AddMessageForm/AddMessageForm\";\r\nimport {Messages} from \"../Messages/Messages\";\r\nimport {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {thunks} from \"../../../redux/thunks/thunks\";\r\nimport {getSocketStatus} from \"../../../utils/selectors/userSelectors\";\r\n\r\nexport const Chat = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector(getSocketStatus)\r\n\r\n    useEffect(() => {\r\n        dispatch(thunks.messagesListening())\r\n        return () => {\r\n            dispatch(thunks.stopMessagesListening())\r\n        }\r\n    }, []);\r\n\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Error! Please refresh the page.</div>}\r\n        <Messages/>\r\n        <AddMessageForm/>\r\n    </div>\r\n}","import React from \"react\";\r\nimport {Chat} from \"./Chat/Chat\";\r\n\r\nexport type ChatMessage = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst ChatPage = () => {\r\n\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage"],"names":["AddMessageForm","messageText","setMessageText","useState","socketStatus","useSelector","getSocketStatus","dispatch","useDispatch","_jsxs","children","_jsx","onChange","event","currentTarget","value","disabled","onClick","sendMessageHandler","thunks","sendMessage","Message","_ref","message","src","photo","alt","width","userName","Messages","messages","getChatMessages","messageAnchorRef","useRef","autoScroll","setAutoScroll","useEffect","_messageAnchorRef$cur","current","scrollIntoView","behavior","className","s","onScroll","element","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","ref","Chat","status","messagesListening","stopMessagesListening","ChatPage"],"sourceRoot":""}