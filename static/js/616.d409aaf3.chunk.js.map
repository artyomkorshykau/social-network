{"version":3,"file":"static/js/616.d409aaf3.chunk.js","mappings":"+IACA,SAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,uBCQzK,MAAMA,EAAaC,IAAwB,IAAvB,KAACC,EAAI,GAAEC,GAAUF,EACpCG,EAAO,YAAcD,EAEzB,OAAQE,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEC,OAAS,IAAMD,EAAEE,OAAOC,UAC9CL,EAAAA,EAAAA,KAACM,EAAAA,GAAO,CAACC,GAAIR,EAAKM,SAAER,KAClB,ECPGW,EAAUZ,IAAuB,IAAtB,QAACa,GAAeb,EACpC,OAAQI,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEC,OAAOE,SAAEI,GAAc,E,2CCFrD,MAAMC,GAAYC,EAAAA,EAAAA,GAAiB,KAmBtBC,GAAsBC,EAAAA,EAAAA,GAAuB,CAACC,KAAM,yBAA9BD,EAjBXE,IAEhBC,EAAAA,EAAAA,MAAA,QAAMC,SAAUF,EAAMG,aAAab,SAAA,EAC/BL,EAAAA,EAAAA,KAAA,OAAAK,UACIL,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACC,UAAWC,EAAAA,EACXxB,KAAM,iBACNyB,YAAa,qBACbC,SAAU,CAACC,EAAAA,EAAUd,QAGhCV,EAAAA,EAAAA,KAAA,OAAAK,UACIL,EAAAA,EAAAA,KAAA,UAAAK,SAAQ,gB,iCCbxB,MAAMoB,EAAmBC,IAAe,CACpCC,OAAQD,EAAME,KAAKD,S,cAIhB,IAA6BE,ECiCpC,SDjCoCA,ECAC,KAEjC,MAAM,YAACC,GCPA,CACHA,aAHgBC,EAAAA,EAAAA,IAAYC,EAAAA,KDWhC,IAAIC,EAAcH,EAAYI,QACzBC,KAAI,CAACD,EAAiBE,KAAUpC,EAAAA,EAAAA,KAACL,EAAU,CACCE,KAAMqC,EAAQrC,KACdC,GAAIoC,EAAQpC,IAFPsC,KAGlDC,EAAcP,EAAYQ,SACzBH,KAAI,CAAC1B,EAAmB2B,KAAUpC,EAAAA,EAAAA,KAACQ,EAAO,CACCC,QAASA,EAAQ8B,OADZH,KAOrD,OACIpB,EAAAA,EAAAA,MAAA,OAAKf,UAAWC,EAAEgC,QAAQ7B,SAAA,EACtBL,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEsC,aAAanC,SAC1B4B,KAELjC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEoC,SAASjC,UACvBL,EAAAA,EAAAA,KAAA,OAAAK,SAAMgC,OAEVrC,EAAAA,EAAAA,KAACY,EAAmB,CAACK,SAZNwB,IACnBC,EAAAA,EAAQC,YAAYF,EAAOG,eAAe,MAYpC,GDhBHC,EAAAA,EAAAA,IAA0CpB,EAA1CoB,EARP,SAA2B9B,GAEvB,IAAI,OAACY,KAAWmB,GAAa/B,EAC7B,OAAKY,GAEE3B,EAAAA,EAAAA,KAAC6B,EAAS,IAAKiB,KAFF9C,EAAAA,EAAAA,KAAC+C,EAAAA,GAAQ,CAACxC,GAAI,UAGtC,I","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsPage.tsx","utils/hooks/useDialogsData.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__DWnTV\",\"dialogsItems\":\"Dialogs_dialogsItems__2aj4l\",\"active\":\"Dialogs_active__Ifobq\",\"messages\":\"Dialogs_messages__YJu8W\",\"message\":\"Dialogs_message__S0Ae0\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype Props = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem = ({name, id}: Props) => {\r\n    let path = '/dialogs/' + id\r\n\r\n    return (<div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{name}</NavLink>\r\n    </div>)\r\n}\r\n\r\n","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype Props = {\r\n    message: string\r\n}\r\n\r\nexport const Message = ({message}: Props) => {\r\n    return (<div className={s.dialog}>{message}</div>)\r\n}\r\n","import {maxLengthCreator, required} from \"../../../utils/validators/validator\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../../../common/FormControls/FormControls\";\r\nimport React from \"react\";\r\nimport {MessageBody} from \"../DialogsPage\";\r\n\r\nconst maxLength = maxLengthCreator(100)\r\n\r\nconst AddMessageForm = (props: InjectedFormProps<MessageBody>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<MessageBody>({form: 'dialogsAddMessageForm'})(AddMessageForm)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppState} from \"../redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state: AppState): MapStateToProps => ({\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStateToProps) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as unknown as T}/>\r\n    }\r\n\r\n    return connect<MapStateToProps, {}, T, AppState>(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n//--------------------------------TYPES--------------------------------\r\ntype MapStateToProps = {\r\n    isAuth: boolean | null\r\n}\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {Dialog, Messages} from \"../../redux/dialogs-reducer\";\r\nimport {AddMessageReduxForm} from \"./AddMessageForm/AddMessageForm\";\r\nimport {actions} from \"../../redux/actions/actions\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {useDialogsData} from \"../../utils/hooks/useDialogsData\";\r\n\r\n\r\nconst DialogsPage = withAuthRedirect(() => {\r\n\r\n    const {dialogsPage} = useDialogsData()\r\n\r\n    let dialogsItem = dialogsPage.dialogs\r\n        .map((dialogs: Dialog, index) => <DialogItem key={index}\r\n                                                     name={dialogs.name}\r\n                                                     id={dialogs.id}/>)\r\n    let messageItem = dialogsPage.messages\r\n        .map((message: Messages, index) => <Message key={index}\r\n                                                    message={message.title}/>)\r\n\r\n    const addNewMessage = (values: MessageBody) => {\r\n        actions.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsItem}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageItem}</div>\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport type MessageBody = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport default DialogsPage","import {useSelector} from \"react-redux\";\r\nimport {getDialogsPage} from \"../selectors/userSelectors\";\r\n\r\nexport const useDialogsData = () => {\r\n    const dialogsPage = useSelector(getDialogsPage)\r\n\r\n    return {\r\n        dialogsPage,\r\n    }\r\n}"],"names":["DialogItem","_ref","name","id","path","_jsx","className","s","dialog","active","children","NavLink","to","Message","message","maxLength","maxLengthCreator","AddMessageReduxForm","reduxForm","form","props","_jsxs","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","mapStateToProps","state","isAuth","auth","Component","dialogsPage","useSelector","getDialogsPage","dialogsItem","dialogs","map","index","messageItem","messages","title","dialogsItems","values","actions","sendMessage","newMessageBody","connect","restProps","Redirect"],"sourceRoot":""}